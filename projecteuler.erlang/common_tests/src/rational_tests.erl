%% @author std-string

-module(rational_tests).

-include_lib("eunit/include/eunit.hrl").

%% ====================================================================
%% Test functions
%% ====================================================================

add_error_test_() ->
    [{"add({4.0, 3}, {1, 2})", ?_assertError(badarg, rational:add({4.0, 3}, {1, 2}))},
     {"add({4, 3.0}, {1, 2})", ?_assertError(badarg, rational:add({4, 3.0}, {1, 2}))},
     {"add({4, 3}, {1.0, 2})", ?_assertError(badarg, rational:add({4, 3}, {1.0, 2}))},
     {"add({4, 3}, {1, 2.0})", ?_assertError(badarg, rational:add({4.0, 3}, {1, 2.0}))},
     {"add({4, 3, 2}, {1, 2})", ?_assertError(badarg, rational:add({4, 3, 2}, {1, 2}))},
     {"add({4, 3}, {1, 2, 3})", ?_assertError(badarg, rational:add({4, 3}, {1, 2, 3}))},
     {"add(4.0, {1, 2})", ?_assertError(badarg, rational:add(4.0, {1, 2}))},
     {"add(4, {1.0, 2})", ?_assertError(badarg, rational:add(4, {1.0, 2}))},
     {"add(4, {1, 2.0})", ?_assertError(badarg, rational:add(4, {1, 2.0}))},
     {"add({1.0, 2}, 4)", ?_assertError(badarg, rational:add({1.0, 2}, 4))},
     {"add({1, 2.0}, 4)", ?_assertError(badarg, rational:add({1, 2.0}, 4))},
     {"add({1, 2}, 4.0)", ?_assertError(badarg, rational:add({1, 2}, 4.0))},
     {"add(1, 2.0)", ?_assertError(badarg, rational:add(1, 2.0))},
     {"add(1.0, 2)", ?_assertError(badarg, rational:add(1.0, 2))},
     {"add({4, 0}, {1, 2})", ?_assertError(badarg, rational:add({4, 0}, {1, 2}))},
     {"add({4, 3}, {1, 0})", ?_assertError(badarg, rational:add({4, 3}, {1, 0}))},
     {"add(4, {1, 0})", ?_assertError(badarg, rational:add(4, {1, 0}))},
     {"add({1, 0}, 4)", ?_assertError(badarg, rational:add({1, 0}, 4))}].

add_test_() ->
    [{"add({1, 2}, {1, 4})", ?_assertEqual({6, 8}, rational:add({1, 2}, {1, 4}))},
     {"add({2, 4}, {3, 4})", ?_assertEqual({5, 4}, rational:add({2, 4}, {3, 4}))},
     {"add({2, 5}, {2, 3})", ?_assertEqual({16, 15}, rational:add({2, 5}, {2, 3}))},
     {"add({0, 5}, {2, 3})", ?_assertEqual({2, 3}, rational:add({0, 5}, {2, 3}))},
     {"add({2, 3}, {0, 5})", ?_assertEqual({2, 3}, rational:add({2, 3}, {0, 5}))},
     {"add({1, 2}, {1, 2})", ?_assertEqual(1, rational:add({1, 2}, {1, 2}))},
     {"add({2, 1}, {3, 1})", ?_assertEqual(5, rational:add({2, 1}, {3, 1}))},
     {"add({1, 2}, {-1, 3})", ?_assertEqual({1, 6}, rational:add({1, 2}, {-1, 3}))},
     {"add({-1, 3}, {1, 2})", ?_assertEqual({1, 6}, rational:add({-1, 3}, {1, 2}))},
     {"add({1, 2}, {-1, 2})", ?_assertEqual(0, rational:add({1, 2}, {-1, 2}))},
     {"add({-1, 2}, {1, 2})", ?_assertEqual(0, rational:add({-1, 2}, {1, 2}))},
     {"add({-1, 2}, {1, 3})", ?_assertEqual({-1, 6}, rational:add({-1, 2}, {1, 3}))},
     {"add({1, 3}, {-1, 2})", ?_assertEqual({-1, 6}, rational:add({1, 3}, {-1, 2}))},
     {"add(2, {2, 3})", ?_assertEqual({8, 3}, rational:add(2, {2, 3}))},
     {"add({2, 3}, 1)", ?_assertEqual({5, 3}, rational:add({2, 3}, 1))},
     {"add(0, {2, 3})", ?_assertEqual({2, 3}, rational:add(0, {2, 3}))},
     {"add({2, 3}, 0)", ?_assertEqual({2, 3}, rational:add({2, 3}, 0))},
     {"add(2, {2, 1})", ?_assertEqual(4, rational:add(2, {2, 1}))},
     {"add({3, 1}, 1)", ?_assertEqual(4, rational:add({3, 1}, 1))},
     {"add(-1, {3, 2})", ?_assertEqual({1, 2}, rational:add(-1, {3, 2}))},
     {"add({3, 2}, -1)", ?_assertEqual({1, 2}, rational:add({3, 2}, -1))},
     {"add(-2, {3, 2})", ?_assertEqual({-1, 2}, rational:add(-2, {3, 2}))},
     {"add({3, 2}, -2)", ?_assertEqual({-1, 2}, rational:add({3, 2}, -2))},
     {"add(2, 3)", ?_assertEqual(5, rational:add(2, 3))},
     {"add(0, 3)", ?_assertEqual(3, rational:add(0, 3))},
     {"add(2, -1)", ?_assertEqual(1, rational:add(2, -1))},
     {"add(-1, 2)", ?_assertEqual(1, rational:add(-1, 2))},
     {"add(2, -3)", ?_assertEqual(-1, rational:add(2, -3))},
     {"add(-3, 2)", ?_assertEqual(-1, rational:add(-3, 2))}].

sub_error_test_() ->
    [{"sub({4.0, 3}, {1, 2})", ?_assertError(badarg, rational:sub({4.0, 3}, {1, 2}))},
     {"sub({4, 3.0}, {1, 2})", ?_assertError(badarg, rational:sub({4, 3.0}, {1, 2}))},
     {"sub({4, 3}, {1.0, 2})", ?_assertError(badarg, rational:sub({4, 3}, {1.0, 2}))},
     {"sub({4, 3}, {1, 2.0})", ?_assertError(badarg, rational:sub({4.0, 3}, {1, 2.0}))},
     {"sub({4, 3, 2}, {1, 2})", ?_assertError(badarg, rational:sub({4, 3, 2}, {1, 2}))},
     {"sub({4, 3}, {1, 2, 3})", ?_assertError(badarg, rational:sub({4, 3}, {1, 2, 3}))},
     {"sub(4.0, {1, 2})", ?_assertError(badarg, rational:sub(4.0, {1, 2}))},
     {"sub(4, {1.0, 2})", ?_assertError(badarg, rational:sub(4, {1.0, 2}))},
     {"sub(4, {1, 2.0})", ?_assertError(badarg, rational:sub(4, {1, 2.0}))},
     {"sub({1.0, 2}, 4)", ?_assertError(badarg, rational:sub({1.0, 2}, 4))},
     {"sub({1, 2.0}, 4)", ?_assertError(badarg, rational:sub({1, 2.0}, 4))},
     {"sub({1, 2}, 4.0)", ?_assertError(badarg, rational:sub({1, 2}, 4.0))},
     {"sub(1, 2.0)", ?_assertError(badarg, rational:sub(1, 2.0))},
     {"sub(1.0, 2)", ?_assertError(badarg, rational:sub(1.0, 2))},
     {"sub({4, 0}, {1, 2})", ?_assertError(badarg, rational:sub({4, 0}, {1, 2}))},
     {"sub({4, 3}, {1, 0})", ?_assertError(badarg, rational:sub({4, 3}, {1, 0}))},
     {"sub(4, {1, 0})", ?_assertError(badarg, rational:sub(4, {1, 0}))},
     {"sub({1, 0}, 4)", ?_assertError(badarg, rational:sub({1, 0}, 4))}].

sub_test_() ->
    [{"sub({1, 2}, {1, 4})", ?_assertEqual({1, 4}, rational:sub({1, 2}, {1, 4}))},
     {"sub({1, 4}, {1, 2})", ?_assertEqual({-1, 4}, rational:sub({1, 4}, {1, 2}))},
     {"sub({7, 4}, {2, 4})", ?_assertEqual({5, 4}, rational:sub({7, 4}, {2, 4}))},
     {"sub({9, 5}, {2, 3})", ?_assertEqual({17, 15}, rational:sub({9, 5}, {2, 3}))},
     {"sub({0, 5}, {2, 3})", ?_assertEqual({-2, 3}, rational:sub({0, 5}, {2, 3}))},
     {"sub({3, 2}, {1, 2})", ?_assertEqual(1, rational:sub({3, 2}, {1, 2}))},
     {"sub({1, 2}, {3, 2})", ?_assertEqual(-1, rational:sub({1, 2}, {3, 2}))},
     {"sub({3, 1}, {2, 1})", ?_assertEqual(1, rational:sub({3, 1}, {2, 1}))},
     {"sub({2, 1}, {3, 1})", ?_assertEqual(-1, rational:sub({2, 1}, {3, 1}))},
     {"sub({1, 2}, {-1, 3})", ?_assertEqual({5, 6}, rational:sub({1, 2}, {-1, 3}))},
     {"sub({-1, 3}, {1, 2})", ?_assertEqual({-5, 6}, rational:sub({-1, 3}, {1, 2}))},
     {"sub({1, 2}, {-1, 2})", ?_assertEqual(1, rational:sub({1, 2}, {-1, 2}))},
     {"sub({-1, 2}, {1, 2})", ?_assertEqual(-1, rational:sub({-1, 2}, {1, 2}))},
     {"sub(2, {2, 3})", ?_assertEqual({4, 3}, rational:sub(2, {2, 3}))},
     {"sub({2, 3}, 1)", ?_assertEqual({-1, 3}, rational:sub({2, 3}, 1))},
     {"sub(-1, {2, 3})", ?_assertEqual({-5, 3}, rational:sub(-1, {2, 3}))},
     {"sub({2, 3}, -1)", ?_assertEqual({5, 3}, rational:sub({2, 3}, -1))},
     {"sub(0, {2, 3})", ?_assertEqual({-2, 3}, rational:sub(0, {2, 3}))},
     {"sub({2, 3}, 0)", ?_assertEqual({2, 3}, rational:sub({2, 3}, 0))},
     {"sub(3, {2, 1})", ?_assertEqual(1, rational:sub(3, {2, 1}))},
     {"sub({3, 1}, 2)", ?_assertEqual(1, rational:sub({3, 1}, 2))},
     {"sub(2, 3)", ?_assertEqual(-1, rational:sub(2, 3))},
     {"sub(3, 2)", ?_assertEqual(1, rational:sub(3, 2))},
     {"sub(0, 3)", ?_assertEqual(-3, rational:sub(0, 3))},
     {"sub(3, 0)", ?_assertEqual(3, rational:sub(3, 0))},
     {"sub(2, -1)", ?_assertEqual(3, rational:sub(2, -1))},
     {"sub(-1, 2)", ?_assertEqual(-3, rational:sub(-1, 2))}].

mult_error_test_() ->
    [{"mult({4.0, 3}, {1, 2})", ?_assertError(badarg, rational:mult({4.0, 3}, {1, 2}))},
     {"mult({4, 3.0}, {1, 2})", ?_assertError(badarg, rational:mult({4, 3.0}, {1, 2}))},
     {"mult({4, 3}, {1.0, 2})", ?_assertError(badarg, rational:mult({4, 3}, {1.0, 2}))},
     {"mult({4, 3}, {1, 2.0})", ?_assertError(badarg, rational:mult({4.0, 3}, {1, 2.0}))},
     {"mult({4, 3, 2}, {1, 2})", ?_assertError(badarg, rational:mult({4, 3, 2}, {1, 2}))},
     {"mult({4, 3}, {1, 2, 3})", ?_assertError(badarg, rational:mult({4, 3}, {1, 2, 3}))},
     {"mult(4.0, {1, 2})", ?_assertError(badarg, rational:mult(4.0, {1, 2}))},
     {"mult(4, {1.0, 2})", ?_assertError(badarg, rational:mult(4, {1.0, 2}))},
     {"mult(4, {1, 2.0})", ?_assertError(badarg, rational:mult(4, {1, 2.0}))},
     {"mult({1.0, 2}, 4)", ?_assertError(badarg, rational:mult({1.0, 2}, 4))},
     {"mult({1, 2.0}, 4)", ?_assertError(badarg, rational:mult({1, 2.0}, 4))},
     {"mult({1, 2}, 4.0)", ?_assertError(badarg, rational:mult({1, 2}, 4.0))},
     {"mult(1, 2.0)", ?_assertError(badarg, rational:mult(1, 2.0))},
     {"mult(1.0, 2)", ?_assertError(badarg, rational:mult(1.0, 2))},
     {"mult({4, 0}, {1, 2})", ?_assertError(badarg, rational:mult({4, 0}, {1, 2}))},
     {"mult({4, 3}, {1, 0})", ?_assertError(badarg, rational:mult({4, 3}, {1, 0}))},
     {"mult(4, {1, 0})", ?_assertError(badarg, rational:mult(4, {1, 0}))},
     {"mult({1, 0}, 4)", ?_assertError(badarg, rational:mult({1, 0}, 4))}].

mult_test_() ->
    [{"mult({1, 2}, {1, 4})", ?_assertEqual({1, 8}, rational:mult({1, 2}, {1, 4}))},
     {"mult({1, 4}, {1, 2})", ?_assertEqual({1, 8}, rational:mult({1, 4}, {1, 2}))},
     {"mult({2, 3}, {5, 7})", ?_assertEqual({10, 21}, rational:mult({2, 3}, {5, 7}))},
     {"mult({5, 7}, {2, 3})", ?_assertEqual({10, 21}, rational:mult({5, 7}, {2, 3}))},
     {"mult({2, 3}, {1, 2})", ?_assertEqual({1, 3}, rational:mult({2, 3}, {1, 2}))},
     {"mult({1, 2}, {2, 3})", ?_assertEqual({1, 3}, rational:mult({1, 2}, {2, 3}))},
     {"mult({2, 5}, {3, 4})", ?_assertEqual({6, 20}, rational:mult({2, 5}, {3, 4}))},
     {"mult({3, 4}, {2, 5})", ?_assertEqual({6, 20}, rational:mult({3, 4}, {2, 5}))},
     {"mult({-2, 3}, {1, 2})", ?_assertEqual({-1, 3}, rational:mult({-2, 3}, {1, 2}))},
     {"mult({1, 2}, {-2, 3})", ?_assertEqual({-1, 3}, rational:mult({1, 2}, {-2, 3}))},
     {"mult({2, 3}, {-1, 2})", ?_assertEqual({-1, 3}, rational:mult({2, 3}, {-1, 2}))},
     {"mult({-1, 2}, {2, 3})", ?_assertEqual({-1, 3}, rational:mult({-1, 2}, {2, 3}))},
     {"mult({-2, 3}, {-1, 2})", ?_assertEqual({1, 3}, rational:mult({-2, 3}, {-1, 2}))},
     {"mult({-1, 2}, {-2, 3})", ?_assertEqual({1, 3}, rational:mult({-1, 2}, {-2, 3}))},
     {"mult({4, 3}, {5, 4})", ?_assertEqual({20, 12}, rational:mult({4, 3}, {5, 4}))},
     {"mult({5, 4}, {4, 3})", ?_assertEqual({20, 12}, rational:mult({5, 4}, {4, 3}))},
     {"mult({2, 3}, {3, 2})", ?_assertEqual(1, rational:mult({2, 3}, {3, 2}))},
     {"mult({3, 2}, {2, 3})", ?_assertEqual(1, rational:mult({3, 2}, {2, 3}))},
     {"mult({5, 2}, {4, 5})", ?_assertEqual(2, rational:mult({5, 2}, {4, 5}))},
     {"mult({4, 5}, {5, 2})", ?_assertEqual(2, rational:mult({4, 5}, {5, 2}))},
     {"mult({-5, 2}, {4, 5})", ?_assertEqual(-2, rational:mult({-5, 2}, {4, 5}))},
     {"mult({4, 5}, {-5, 2})", ?_assertEqual(-2, rational:mult({4, 5}, {-5, 2}))},
     {"mult({5, 2}, {-4, 5})", ?_assertEqual(-2, rational:mult({5, 2}, {-4, 5}))},
     {"mult({-4, 5}, {5, 2})", ?_assertEqual(-2, rational:mult({-4, 5}, {5, 2}))},
     {"mult({-5, 2}, {-4, 5})", ?_assertEqual(2, rational:mult({-5, 2}, {-4, 5}))},
     {"mult({-4, 5}, {-5, 2})", ?_assertEqual(2, rational:mult({-4, 5}, {-5, 2}))},
     {"mult(1, {0, 3})", ?_assertEqual(0, rational:mult(1, {0, 3}))},
     {"mult({0, 3}, 1)", ?_assertEqual(0, rational:mult({0, 3}, 1))},
     {"mult(0, {1, 3})", ?_assertEqual(0, rational:mult(0, {1, 3}))},
     {"mult({1, 3}, 0)", ?_assertEqual(0, rational:mult({1, 3}, 0))},
     {"mult(1, {1, 3})", ?_assertEqual({1, 3}, rational:mult(1, {1, 3}))},
     {"mult({1, 3}, 1)", ?_assertEqual({1, 3}, rational:mult({1, 3}, 1))},
     {"mult(2, {1, 3})", ?_assertEqual({2, 3}, rational:mult(2, {1, 3}))},
     {"mult({1, 3}, 2)", ?_assertEqual({2, 3}, rational:mult({1, 3}, 2))},
     {"mult(2, {3, 2})", ?_assertEqual(3, rational:mult(2, {3, 2}))},
     {"mult({3, 2}, 2)", ?_assertEqual(3, rational:mult({3, 2}, 2))},
     {"mult(-1, {1, 3})", ?_assertEqual({-1, 3}, rational:mult(-1, {1, 3}))},
     {"mult({1, 3}, -1)", ?_assertEqual({-1, 3}, rational:mult({1, 3}, -1))},
     {"mult(1, {-1, 3})", ?_assertEqual({-1, 3}, rational:mult(1, {-1, 3}))},
     {"mult({-1, 3}, 1)", ?_assertEqual({-1, 3}, rational:mult({-1, 3}, 1))},
     {"mult(-1, {-1, 3})", ?_assertEqual({1, 3}, rational:mult(-1, {-1, 3}))},
     {"mult({-1, 3}, -1)", ?_assertEqual({1, 3}, rational:mult({-1, 3}, -1))}].

divide_error_test_() ->
    [{"divide({4.0, 3}, {1, 2})", ?_assertError(badarg, rational:divide({4.0, 3}, {1, 2}))},
     {"divide({4, 3.0}, {1, 2})", ?_assertError(badarg, rational:divide({4, 3.0}, {1, 2}))},
     {"divide({4, 3}, {1.0, 2})", ?_assertError(badarg, rational:divide({4, 3}, {1.0, 2}))},
     {"divide({4, 3}, {1, 2.0})", ?_assertError(badarg, rational:divide({4.0, 3}, {1, 2.0}))},
     {"divide({4, 3, 2}, {1, 2})", ?_assertError(badarg, rational:divide({4, 3, 2}, {1, 2}))},
     {"divide({4, 3}, {1, 2, 3})", ?_assertError(badarg, rational:divide({4, 3}, {1, 2, 3}))},
     {"divide(4.0, {1, 2})", ?_assertError(badarg, rational:divide(4.0, {1, 2}))},
     {"divide(4, {1.0, 2})", ?_assertError(badarg, rational:divide(4, {1.0, 2}))},
     {"divide(4, {1, 2.0})", ?_assertError(badarg, rational:divide(4, {1, 2.0}))},
     {"divide({1.0, 2}, 4)", ?_assertError(badarg, rational:divide({1.0, 2}, 4))},
     {"divide({1, 2.0}, 4)", ?_assertError(badarg, rational:divide({1, 2.0}, 4))},
     {"divide({1, 2}, 4.0)", ?_assertError(badarg, rational:divide({1, 2}, 4.0))},
     {"divide(1, 2.0)", ?_assertError(badarg, rational:divide(1, 2.0))},
     {"divide(1.0, 2)", ?_assertError(badarg, rational:divide(1.0, 2))},
     {"divide({4, 0}, {1, 2})", ?_assertError(badarg, rational:divide({4, 0}, {1, 2}))},
     {"divide({4, 3}, {1, 0})", ?_assertError(badarg, rational:divide({4, 3}, {1, 0}))},
     {"divide({4, 3}, {0, 1})", ?_assertError(badarg, rational:divide({4, 3}, {0, 1}))},
     {"divide(4, {1, 0})", ?_assertError(badarg, rational:divide(4, {1, 0}))},
     {"divide({1, 0}, 4)", ?_assertError(badarg, rational:divide({1, 0}, 4))},
     {"divide({1, 2}, 0)", ?_assertError(badarg, rational:divide({1, 2}, 0))}].

divide_test_() ->
    [{"divide({1, 2}, {1, 4})", ?_assertEqual(2, rational:divide({1, 2}, {1, 4}))},
     {"divide({1, 4}, {1, 2})", ?_assertEqual({1, 2}, rational:divide({1, 4}, {1, 2}))},
     {"divide({2, 5}, {2, 3})", ?_assertEqual({6, 10}, rational:divide({2, 5}, {2, 3}))},
     {"divide({2, 3}, {2, 5})", ?_assertEqual({10, 6}, rational:divide({2, 3}, {2, 5}))},
     {"divide({1, 2}, {1, 2})", ?_assertEqual(1, rational:divide({1, 2}, {1, 2}))},
     {"divide({1, 2}, {-1, 4})", ?_assertEqual(-2, rational:divide({1, 2}, {-1, 4}))},
     {"divide({-1, 4}, {1, 2})", ?_assertEqual({-1, 2}, rational:divide({-1, 4}, {1, 2}))},
     {"divide({-1, 2}, {1, 4})", ?_assertEqual(-2, rational:divide({-1, 2}, {1, 4}))},
     {"divide({1, 4}, {-1, 2})", ?_assertEqual({-1, 2}, rational:divide({1, 4}, {-1, 2}))},
     {"divide({-1, 2}, {-1, 4})", ?_assertEqual(2, rational:divide({-1, 2}, {-1, 4}))},
     {"divide({-1, 4}, {-1, 2})", ?_assertEqual({1, 2}, rational:divide({-1, 4}, {-1, 2}))},
     {"divide(0, {1, 2})", ?_assertEqual(0, rational:divide(0, {1, 2}))},
     {"divide({0, 2}, {1, 2})", ?_assertEqual(0, rational:divide({0, 2}, {1, 2}))},
     {"divide(3, {2, 7})", ?_assertEqual({21, 2}, rational:divide(3, {2, 7}))},
     {"divide({2, 7}, 3)", ?_assertEqual({2, 21}, rational:divide({2, 7}, 3))},
     {"divide(3, {3, 7})", ?_assertEqual(7, rational:divide(3, {3, 7}))},
     {"divide({3, 7}, 3)", ?_assertEqual({1, 7}, rational:divide({3, 7}, 3))},
     {"divide(-3, {3, 7})", ?_assertEqual(-7, rational:divide(-3, {3, 7}))},
     {"divide({3, 7}, -3)", ?_assertEqual({-1, 7}, rational:divide({3, 7}, -3))},
     {"divide(3, {-3, 7})", ?_assertEqual(-7, rational:divide(3, {-3, 7}))},
     {"divide({-3, 7}, 3)", ?_assertEqual({-1, 7}, rational:divide({-3, 7}, 3))},
     {"divide(-3, {-3, 7})", ?_assertEqual(7, rational:divide(-3, {-3, 7}))},
     {"divide({-3, 7}, -3)", ?_assertEqual({1, 7}, rational:divide({-3, 7}, -3))}].

reverse_error_test_() ->
    [{"reverse({4.0, 3})", ?_assertError(badarg, rational:reverse({4.0, 3}))},
     {"reverse({4, 3.0})", ?_assertError(badarg, rational:reverse({4, 3.0}))},
     {"reverse({4, 0})", ?_assertError(badarg, rational:reverse({4, 0}))},
     {"reverse(4.0)", ?_assertError(badarg, rational:reverse(4.0))},
     {"reverse(0)", ?_assertError(badarg, rational:reverse(0))}].

reverse_test_() ->
    [{"reverse({1, 3})", ?_assertEqual(3, rational:reverse({1, 3}))},
     {"reverse({2, 3})", ?_assertEqual({3, 2}, rational:reverse({2, 3}))},
     {"reverse({4, 6})", ?_assertEqual({6, 4}, rational:reverse({4, 6}))},
     {"reverse(666)", ?_assertEqual({1, 666}, rational:reverse(666))}].

simplify_error_test_() ->
    [{"simplify({4.0, 3})", ?_assertError(badarg, rational:simplify({4.0, 3}))},
     {"simplify({4, 3.0})", ?_assertError(badarg, rational:simplify({4, 3.0}))},
     {"simplify({4, 0})", ?_assertError(badarg, rational:simplify({4, 0}))},
     {"simplify(4.0)", ?_assertError(badarg, rational:simplify(4.0))}].

simplify_test_() ->
    [{"simplify({3, 4})", ?_assertEqual({3, 4}, rational:simplify({3, 4}))},
     {"simplify({4, 3})", ?_assertEqual({4, 3}, rational:simplify({4, 3}))},
     {"simplify({6, 21})", ?_assertEqual({2, 7}, rational:simplify({6, 21}))},
     {"simplify({21, 6})", ?_assertEqual({7, 2}, rational:simplify({21, 6}))},
     {"simplify({2, 4})", ?_assertEqual({1, 2}, rational:simplify({2, 4}))},
     {"simplify({4, 2})", ?_assertEqual(2, rational:simplify({4, 2}))},
     {"simplify(13)", ?_assertEqual(13, rational:simplify(13))}].

%% ====================================================================
%% Internal functions
%% ====================================================================