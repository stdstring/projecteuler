namespace ProjectEulerTasks

open NUnit.Framework
open ProjectEulerTasks.Utils

// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

type FibonacciData = {mutable Prev: int; mutable Current: int}

[<TestFixture>]
type Problem002() =

    let solveImple (maxNumber: int) =
        let data = {FibonacciData.Prev = 0; FibonacciData.Current = 1}
        let generator = fun index ->
            let next = data.Prev + data.Current
            data.Prev <- data.Current
            data.Current <- next
            next
        generator |> Seq.initInfinite |> Seq.takeWhile (fun number -> number <= maxNumber) |> Seq.filter (fun number -> number % 2 = 0) |> Seq.sum

    [<TestCase(99, 44, TimeThresholds.HardTimeLimit)>]
    [<TestCase(3999999, 4613732, TimeThresholds.HardTimeLimit)>]
    member public this.Solve(maxNumber: int, expectedAnswer: int, timeLimit: int) =
        SolutionUtils.CheckSolution(timeLimit, expectedAnswer, fun() -> solveImple maxNumber)
