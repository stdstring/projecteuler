%% @author std-string

%% The sequence of triangle numbers is generated by adding the natural numbers.
%% So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
%% The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
%% Let us list the factors of the first seven triangle numbers:
%%  1: 1
%%  3: 1, 3
%%  6: 1, 2, 3, 6
%% 10: 1, 2, 5, 10
%% 15: 1, 3, 5, 15
%% 21: 1, 3, 7, 21
%% 28: 1, 2, 4, 7, 14, 28
%% We can see that 28 is the first triangle number to have over five divisors.
%% What is the value of the first triangle number to have over five hundred divisors?

-module(problem_012).
-export([get_check_data/0, prepare_data/2, solve/1]).

-behaviour(numerical_task_behaviour).

-type predicate() :: fun((Number :: pos_integer()) -> boolean()).

%% ====================================================================
%% API functions
%% ====================================================================

-spec get_check_data() -> [{Input :: term(), Output :: term()}].
get_check_data() -> [{500 + 1, 76576500}].

-spec prepare_data(ModuleSourceDir :: string(), Input :: term()) -> term().
prepare_data(_ModuleSourceDir, Input) -> Input.

-spec solve(PreparedInput :: term()) -> term().
solve(DividersCountInfimum) ->
    traverse_triangle_numbers(0, 1, fun(Number) -> length(number_dividers:get_dividers(Number)) >= DividersCountInfimum end).

%% ====================================================================
%% Internal functions
%% ====================================================================

-spec traverse_triangle_numbers(Last :: non_neg_integer(), Number :: pos_integer(), Predicate :: predicate()) -> pos_integer().
traverse_triangle_numbers(Last, Number, Predicate) ->
    Current = Last + Number,
    case Predicate(Current) of
        true -> Current;
        false -> traverse_triangle_numbers(Current, Number + 1, Predicate)
    end.